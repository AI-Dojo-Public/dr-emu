"""Create initial tables

Revision ID: f95d310b03d6
Revises: 
Create Date: 2024-05-30 15:57:57.696106

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils


# revision identifiers, used by Alembic.
revision: str = 'f95d310b03d6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('template',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.JSON(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('volume',
    sa.Column('bind', sa.String(), nullable=False),
    sa.Column('local', sa.Boolean(), nullable=False),
    sa.Column('docker_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('kwargs', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('run',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['template_id'], ['template.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('instance',
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['run.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('infrastructure',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('supernet', sa.String(), nullable=True),
    sa.Column('instance_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['instance_id'], ['instance.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appliance',
    sa.Column('cap_add', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('infrastructure_id', sa.Integer(), nullable=False),
    sa.Column('image', sa.String(), nullable=False),
    sa.Column('environment', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('command', sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
    sa.Column('healthcheck', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('detach', sa.Boolean(), nullable=False),
    sa.Column('tty', sa.Boolean(), nullable=False),
    sa.Column('docker_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('kwargs', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['infrastructure_id'], ['infrastructure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('network',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('driver', sa.String(), nullable=False),
    sa.Column('attachable', sa.Boolean(), nullable=False),
    sa.Column('ipaddress', sa.String(), nullable=True),
    sa.Column('router_gateway', sa.String(), nullable=True),
    sa.Column('infrastructure_id', sa.Integer(), nullable=False),
    sa.Column('network_type', sa.String(), nullable=False),
    sa.Column('docker_id', sa.String(), nullable=False),
    sa.Column('kwargs', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['infrastructure_id'], ['infrastructure.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('appliances_volumes',
    sa.Column('appliance_id', sa.Integer(), nullable=False),
    sa.Column('volume_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['appliance_id'], ['appliance.id'], ),
    sa.ForeignKeyConstraint(['volume_id'], ['volume.id'], ),
    sa.PrimaryKeyConstraint('appliance_id', 'volume_id')
    )
    op.create_table('interface',
    sa.Column('network_id', sa.Integer(), nullable=False),
    sa.Column('ipaddress', sa.String(), nullable=True),
    sa.Column('original_ip', sa.String(), nullable=True),
    sa.Column('appliance_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['appliance_id'], ['appliance.id'], ),
    sa.ForeignKeyConstraint(['network_id'], ['network.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('node',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ipc_mode', sa.String(), nullable=True),
    sa.Column('depends_on', sqlalchemy_utils.types.json.JSONType(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['appliance.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('router',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('router_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['appliance.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('firewall_rule',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('src_net_id', sa.Integer(), nullable=False),
    sa.Column('dst_net_id', sa.Integer(), nullable=False),
    sa.Column('router_id', sa.Integer(), nullable=False),
    sa.Column('service', sa.String(), nullable=False),
    sa.Column('policy', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['dst_net_id'], ['network.id'], ),
    sa.ForeignKeyConstraint(['router_id'], ['router.id'], ),
    sa.ForeignKeyConstraint(['src_net_id'], ['network.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('service',
    sa.Column('parent_node_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('image', sa.String(), nullable=False),
    sa.Column('environment', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('command', sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True),
    sa.Column('healthcheck', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('detach', sa.Boolean(), nullable=False),
    sa.Column('tty', sa.Boolean(), nullable=False),
    sa.Column('docker_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('kwargs', sqlalchemy_utils.types.json.JSONType(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['parent_node_id'], ['node.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('depends_on',
    sa.Column('dependant_service_id', sa.Integer(), nullable=False),
    sa.Column('dependency_service_id', sa.Integer(), nullable=False),
    sa.Column('state', sa.Enum('service_healthy', 'service_started', name='containerstate'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['dependant_service_id'], ['service.id'], ),
    sa.ForeignKeyConstraint(['dependency_service_id'], ['service.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('services_volumes',
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('volume_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ),
    sa.ForeignKeyConstraint(['volume_id'], ['volume.id'], ),
    sa.PrimaryKeyConstraint('service_id', 'volume_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('services_volumes')
    op.drop_table('depends_on')
    op.drop_table('service')
    op.drop_table('firewall_rule')
    op.drop_table('router')
    op.drop_table('node')
    op.drop_table('interface')
    op.drop_table('appliances_volumes')
    op.drop_table('network')
    op.drop_table('appliance')
    op.drop_table('infrastructure')
    op.drop_table('instance')
    op.drop_table('run')
    op.drop_table('volume')
    op.drop_table('template')
    # ### end Alembic commands ###
