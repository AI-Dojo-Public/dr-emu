version: '3.9'
services:
  wan_router:
    image: registry.gitlab.ics.muni.cz:443/244656/ai-dojo-docker-testbed:vyos-1.3
    restart: always
    container_name: wan_router
    privileged: true
    networks:
      management:
        ipv4_address: 192.168.50.10
      dmz:
        ipv4_address: 192.168.93.1
      cryton:
        ipv4_address: 192.168.90.1
    volumes:
      - ./router_scripts/wan_router.sh:/home/vyos/config.sh
    entrypoint: "/sbin/init"
    command: ["sh", "-c", "su vyos && sudo chmod +x config.sh && ./config.sh"]
    cap_add:
      - NET_ADMIN

  user_router:
    image: registry.gitlab.ics.muni.cz:443/244656/ai-dojo-docker-testbed:vyos-1.3
    restart: always
    container_name: user_router
    privileged: true
    networks:
      management:
        ipv4_address: 192.168.50.11
      user_subnet:
        ipv4_address: 192.168.91.1
    volumes:
      - ./router_scripts/user_router.sh:/home/vyos/config.sh
    entrypoint: "/sbin/init"
    command: ["sh", "-c", "su vyos && ./config.sh"]
    cap_add:
      - NET_ADMIN

  server_router:
    image: registry.gitlab.ics.muni.cz:443/244656/ai-dojo-docker-testbed:vyos-1.3
    restart: always
    container_name: server_router
    privileged: true
    networks:
      management:
        ipv4_address: 192.168.50.12
      server_subnet:
        ipv4_address: 192.168.92.1
    volumes:
      - ./router_scripts/sever_router.sh:/home/vyos/config.sh
    entrypoint: "/sbin/init"
    command: ["sh", "-c", "su vyos && ./config.sh"]
    cap_add:
      - NET_ADMIN

  cryton_core:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-core:latest
    container_name: cryton-core
    ports:
      - "8000:80"
    depends_on:
      cryton_pgbouncer:
        condition: service_healthy
      cryton_rabbit:
        condition: service_healthy
    networks:
      cryton:
        ipv4_address: 192.168.90.21

  cryton_proxy:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-core:proxy-latest
    container_name: cryton-proxy
    network_mode: service:cryton_core
    depends_on:
      cryton_core:
        condition: service_started
    networks:
      cryton:
        ipv4_address: 192.168.90.22

  cryton_db:
    restart: always
    image: postgres:13
    container_name: cryton-db
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: $CRYTON_CORE_DB_PASSWORD
      POSTGRES_USER: $CRYTON_CORE_DB_USERNAME
      POSTGRES_DB: $CRYTON_CORE_DB_NAME
    volumes:
      - cryton_core_db_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: /usr/bin/pg_isready
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      cryton:
        ipv4_address: 192.168.90.23

  cryton_pgbouncer:
    restart: always
    image: edoburu/pgbouncer:1.18.0
    container_name: cryton-pgbouncer
    depends_on:
      cryton_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DB_HOST: cryton_db
      DB_USER: $CRYTON_CORE_DB_USERNAME
      DB_NAME: $CRYTON_CORE_DB_NAME
      DB_PASSWORD: $CRYTON_CORE_DB_PASSWORD
      MAX_CLIENT_CONN: 5000
      DEFAULT_POOL_SIZE: 8
      MIN_POOL_SIZE: 8
      POOL_MODE: transaction
    expose:
      - "5432"
    healthcheck:
      test: /usr/bin/pg_isready -h 0.0.0.0 -p 5432
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      cryton:
        ipv4_address: 192.168.90.20

  cryton_rabbit:
    restart: always
    image: rabbitmq:3.11-management
    container_name: cryton-rabbit
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: $CRYTON_CORE_RABBIT_USERNAME
      RABBITMQ_DEFAULT_PASS: $CRYTON_CORE_RABBIT_PASSWORD
    ports:
      - "5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: rabbitmqctl eval '
        { true, rabbit_app_booted_and_running } = { rabbit:is_booted(node()), rabbit_app_booted_and_running },
        { [], no_alarms } = { rabbit:alarms(), no_alarms },
        [] /= rabbit_networking:active_listeners(),
        rabbitmq_node_is_healthy.
        ' || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      cryton:
        ipv4_address: 192.168.90.24

  cryton_worker:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-worker:kali-latest
    container_name: cryton-worker
    depends_on:
      cryton_rabbit:
        condition: service_healthy
    environment:
      CRYTON_WORKER_NAME: attacker
      CRYTON_WORKER_DEBUG: true
      CRYTON_WORKER_MODULES_DIR: /app/cryton-modules/modules
      CRYTON_WORKER_INSTALL_REQUIREMENTS: true
      CRYTON_WORKER_MSFRPCD_HOST: localhost
      CRYTON_WORKER_MSFRPCD_USERNAME: msf
      CRYTON_WORKER_MSFRPCD_PASSWORD: toor
      CRYTON_WORKER_RABBIT_HOST: cryton_rabbit
      CRYTON_WORKER_RABBIT_PORT: 5672
      CRYTON_WORKER_RABBIT_USERNAME: cryton
      CRYTON_WORKER_RABBIT_PASSWORD: cryton
      CRYTON_WORKER_EMPIRE_HOST: empire
      CRYTON_WORKER_EMPIRE_PORT: 1337
      CRYTON_WORKER_EMPIRE_USERNAME: empireadmin
      CRYTON_WORKER_EMPIRE_PASSWORD: password123
    entrypoint: [ "sh", "-c", "msfrpcd -P toor && cryton-worker start" ]
    cap_add:
      - NET_ADMIN
    command: ['sh', '-c', 'ip route add  ']
    networks:
      cryton:
        ipv4_address: 192.168.90.30

  loki:
    image: nicolaka/netshoot
    restart: always
    container_name: loki
    privileged: true
    networks:
      cryton:
        ipv4_address: 192.168.90.40
    cap_add:
      - NET_ADMIN
    command: ["sh", "-c", "ip route add 192.168.93.0/24 via 192.168.90.1 && sleep infinity"]

  cyst-demo:
    restart: always
    image: python:3.9-slim-buster
    working_dir: /app
    container_name: cyst-demo
    volumes:
      - ./cyst_components/cyst-core/:/app/cyst-core
      - ./cyst_components/beast-demo/:/app/beast-demo
      - ./resources/run_scenario_2.sh/:/app/run_scenario_2.sh
      - ./resources/run_scenario_3.sh/:/app/run_scenario_3.sh
    stdin_open: true
    tty: true
    networks:
      cryton:
        ipv4_address: 192.168.90.11

  wordpress_db:
    image: mysql:8.0.31 # 5.7 <- alternative version
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    volumes:
      - wordpress_db:/var/lib/mysql
    networks:
      dmz:
        ipv4_address: 192.168.93.11
    healthcheck:
      test: mysql $$MYSQL_DATABASE --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD --silent --execute "SELECT 1;"
      interval: 10s
      timeout: 10s
      retries: 7

  wordpress_app:
    image: wordpress:6.1.1-apache  # 4.8.3-php7.1-apache <- alternative version
    restart: always
    expose:
      - 80
    environment: &wordpress_app_env
      WORDPRESS_DB_HOST: wordpress_db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    depends_on:
      wordpress_db:
        condition: service_healthy
    volumes:
      - wordpress_app_html:/var/www/html
    networks:
      dmz:
        ipv4_address: 192.168.93.10
    healthcheck:
      test: curl localhost/wp-admin/install.php | grep WordPress
      interval: 10s
      timeout: 10s
      retries: 3

  wordpress_cli:
    image: wordpress:cli-2.7.1-php8.0 # cli-php7.1 <- alternative version
    depends_on:
      wordpress_db:
        condition: service_healthy
      wordpress_app:
        condition: service_healthy
    network_mode: service:wordpress_app
    environment:
      <<: *wordpress_app_env
    volumes:
      - wordpress_app_html:/var/www/html
    entrypoint: sh
    command: -c 'wp core install --url="http://192.168.91.10" --title="wordpress" --admin_name=wordpress --admin_password="wordpress" --admin_email=wordpress@wordpress.wordpress'

  vulnerable_ftp:
    restart: always
    image: uexpl0it/vulnerable-packages:backdoored-vsftpd-2.3.4
    volumes:
      - ./resources/vsftpd.log:/var/log/vsftpd.log
    networks:
      server_subnet:
        ipv4_address: 192.168.92.13

  vulnerable_db:
    restart: always
    image: postgres:10.5
    environment:
      - POSTGRES_DB=beastdb
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=dbpassword
    volumes:
      - postgres_volume:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./resources/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # copy the sql script to fill tables
      - ./resources/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    networks:
      server_subnet:
        ipv4_address: 192.168.92.21

  thor:
    image: nicolaka/netshoot
    restart: always
    container_name: thor
    privileged: true
    networks:
      server_subnet:
        ipv4_address: 192.168.92.40
    cap_add:
      - NET_ADMIN
    command: [ 'sh', '-c', 'ip route del default && ip route add default via 192.168.92.1 && sleep infinity' ]

  vulnerable_user_machine:
    restart: always
    image: vulnerable_user_machine
    build:
      context: .
      dockerfile: docker_files/Dockerfile-beast-user
    networks:
      user_subnet:
        ipv4_address: 192.168.91.20
    cap_add:
      - NET_ADMIN
    entrypoint: [ "sh", "-c", "service ssh start && tail -f /dev/null" ]

  odin:
    image: nicolaka/netshoot
    restart: always
    container_name: odin
    privileged: true
    networks:
      user_subnet:
        ipv4_address: 192.168.91.40
    cap_add:
      - NET_ADMIN
    command: [ 'sh', '-c', 'ip route del default && ip route add default via 192.168.91.1 && sleep infinity' ]

volumes:
  cryton_core_db_data:
  wordpress_app_html:
  wordpress_db:
  postgres_volume:


networks:
  cryton:
    ipam:
      config:
        - subnet: 192.168.90.0/24
          gateway: 192.168.90.250
  user_subnet:
    ipam:
      config:
        - subnet: 192.168.91.0/24
          gateway: 192.168.91.250
  server_subnet:
    ipam:
      config:
        - subnet: 192.168.92.0/24
          gateway: 192.168.92.250
  dmz:
    ipam:
      config:
        - subnet: 192.168.93.0/24
          gateway: 192.168.93.250
  management:
    ipam:
      config:
        - subnet: 192.168.50.0/24
          gateway: 192.168.50.250

